/****************************************************************************
 *
 *		Copyright(c) 2013-2014 Yamaha Corporation. All rights reserved.
 *
 *		Module		: yad1machdep.c
 *
 *		Description	: Yamaha Audio engine Device version 1
 *						device driver machine dependence part.
 *
 *		Version		: 1.1.0		2014.07.25
 *
 ****************************************************************************/

#include "yad1types.h"
#include "yad1driver.h"
#include "yad1machdep.h"
#include <cutils/log.h>
#include <string.h>
#include "spidev.h"
#include <sys/ioctl.h>

extern int fd;

#define SWAP(A) ((A&0x01) << 7 | (A&0x02) << 5 | \
				 (A&0x04) << 3 | (A&0x08) << 1 | \
				 (A&0x10) >> 1 | (A&0x20) >> 3 | \
				 (A&0x40) >> 5 | (A&0x80) >> 7)

#if		(YAD1_DEVICE_IF	== YAD1_DEVICE_IF_SPI )
/*******************************************************************************
 *	YAD1MD_Write
 *
 *	Function:
 *			SPI Write
 *	Argument:
 *			u08Com				command byte
 *			pu08Data			pointer to data
 *			u32Size				size of data
 *	Return:
 *			YAD1DD_SUCCESS		success
 *			YAD1DD_ERROR_SPI	error(SPI communication)
 *			YAD1DD_ERROR_ARG	error(arguments)
 *
 ******************************************************************************/
S32		YAD1MD_Write
(
	U08					u08Com,
	const U08 *			pu08Data,
	U32					u32Size
)
{
	S32					s32Ret;
	U32					ret;

	if (( pu08Data	== NULL )
	 || ( u32Size	== 0 ))
	{
		s32Ret	= YAD1DD_ERROR_ARG;
	}
	else
	{
		struct spi_ioc_transfer xfer;
		xfer.tx_buf = 0;
		xfer.rx_buf = 0;
		xfer.len = 0;
		xfer.delay_usecs = 0;
		xfer.speed_hz = 0;
		xfer.bits_per_word = 0;

		U08 buf[u32Size + 1], *bp;
		S32 status;
		U32 i;

		//XLOGD("%s: u32Size = %lu\n", __func__, u32Size);
		//XLOGD("-----add xjxu----->write SPI_IOC_MESSAGE start\n");
		/* SPI Write */
		U08 wbuf[u32Size + 1]; 
		memset(wbuf, 0, sizeof(wbuf));
		wbuf[0] = u08Com;
		memcpy(wbuf+1, pu08Data, u32Size);
/*
		for(i = 0; i < u32Size + 1; i++) {
			wbuf[i] = SWAP(wbuf[i]);
		}
		*/

		//memset(xfer, 0, sizeof xfer);
		memset(buf, 0, sizeof buf);
	
		if (u32Size > sizeof buf)
			u32Size = sizeof buf;
	
		xfer.tx_buf = (unsigned long)wbuf;
		xfer.len = u32Size + 1;
	
		xfer.rx_buf = (unsigned long)buf;

		status = ioctl(fd, SPI_IOC_MESSAGE(1), &xfer);
		if (status < 0) {
			//XLOGD("SPI_IOC_MESSAGE\n");
			s32Ret	= YAD1DD_ERROR_SPI;
			return s32Ret;
		}
		//XLOGD("-----add xjxu----->write SPI_IOC_MESSAGE success\n");
	
		/*
		XLOGD("response(%2d, %2d): ", u32Size, status);
		for (bp = pu08Data; u32Size; u32Size--)
			XLOGD(" %02x", *bp++);
		XLOGD("\n");
		*/
	
		s32Ret	= YAD1DD_SUCCESS;
	}

	return s32Ret;
}

/*******************************************************************************
 *	YAD1MD_Read
 *
 *	Function:
 *			SPI Read
 *	Argument:
 *			u08Com				command byte
 *			pu08Data			pointer to data buffer
 *			u32Size				size of data buffer
 *	Return:
 *			YAD1DD_SUCCESS		success
 *			YAD1DD_ERROR_SPI	error(SPI communication)
 *			YAD1DD_ERROR_ARG	error(arguments)
 *
 ******************************************************************************/
S32		YAD1MD_Read
(
	U08					u08Com,
	U08 *				pu08Data,
	U32					u32Size
)
{
	S32					s32Ret;
	U32					ret;

	if (( pu08Data	== NULL )
	 || ( u32Size	== 0 ))
	{
		s32Ret	= YAD1DD_ERROR_ARG;
	}
	else
	{
		/* SPI Read */

		struct spi_ioc_transfer xfer;
		xfer.tx_buf = 0;
		xfer.rx_buf = 0;
		xfer.len = 0;
		xfer.delay_usecs = 0;
		xfer.speed_hz = 0;
		xfer.bits_per_word = 0;

		U08 buf[u32Size + 1], *bp;
		S32 status;
		U32 i;
		uint8_t tmpbits = 8;
	
		
		memset(buf, 0, sizeof buf);
	
		if (u32Size > sizeof buf)
			u32Size = sizeof buf;
	
		buf[0] = u08Com;
		//buf[0] = SWAP(buf[0]);
		xfer.tx_buf = (unsigned long)buf;
		xfer.rx_buf = (unsigned long)(buf+u32Size+1);
		xfer.len = u32Size+1;

		status = ioctl(fd, SPI_IOC_MESSAGE(1), &xfer);
		if (status < 0) {
			XLOGD("SPI_IOC_MESSAGE\n");
			s32Ret	= YAD1DD_ERROR_SPI;
			return s32Ret;
		}
	
		memcpy(pu08Data, buf+2*u32Size+1, u32Size);
		/*
		for(i = 0; i < u32Size; i++) {
			*(pu08Data + i) = SWAP(*(pu08Data + i));
		}
		*/

		//XLOGD("-----add xjxu----->read SPI_IOC_MESSAGE success\n");
		//XLOGD("response(%2ld, %2ld): ", u32Size, status);
		/*
		for (bp = pu08Data; u32Size; u32Size--)
			XLOGD(" %02x", *bp++);
		XLOGD("\n");
		*/
	
		s32Ret	= YAD1DD_SUCCESS;
	}

	return s32Ret;
}
#elif	(YAD1_DEVICE_IF	== YAD1_DEVICE_IF_I2C )
/*******************************************************************************
 *	YAD1MD_WriteI2C
 *
 *	Function:
 *			I2C Write
 *	Argument:
 *			u08SA				I2C slave address
 *			u08IFA				Interface register address(with BW bit)
 *			pu08Data			pointer to data
 *			u32Size				size of data
 *	Return:
 *			YAD1DD_SUCCESS		success
 *			YAD1DD_ERROR_I2C	error(I2C communication)
 *			YAD1DD_ERROR_ARG	error(arguments)
 *
 ******************************************************************************/
S32		YAD1MD_WriteI2C
(
	U08					u08SA,
	U08					u08IFA,
	const U08 *			pu08Data,
	U32					u32Size
)
{
	S32					s32Ret;

	if (( pu08Data	== NULL )
	 || ( u32Size	== 0 ))
	{
		s32Ret	= YAD1DD_ERROR_ARG;
	}
	else
	{
		/* I2C Write */
		s32Ret	= YAD1DD_ERROR_I2C;
	}

	return s32Ret;
}

/*******************************************************************************
 *	YAD1MD_ReadI2C
 *
 *	Function:
 *			I2C Read
 *	Argument:
 *			u08SA				I2C slave address
 *			u08IFA				Interface register address(with BW bit)
 *			pu08Data			pointer to data
 *			u32Size				size of data
 *	Return:
 *			YAD1DD_SUCCESS		success
 *			YAD1DD_ERROR_I2C	error(I2C communication)
 *			YAD1DD_ERROR_ARG	error(arguments)
 *
 ******************************************************************************/
S32		YAD1MD_ReadI2C
(
	U08					u08SA,
	U08					u08IFA,
	U08 *				pu08Data,
	U32					u32Size
)
{
	S32					s32Ret;

	if (( pu08Data	== NULL )
	 || ( u32Size	!= 1 ))
	{
		s32Ret	= YAD1DD_ERROR_ARG;
	}
	else
	{
		/* I2C Read */
		s32Ret	= YAD1DD_ERROR_I2C;
	}

	return s32Ret;
}
#endif
/*******************************************************************************
 *	YAD1MD_Sleep
 *
 *	Function:
 *			Sleep u32MSec[msec]
 *	Argument:
 *			u32MSec				sleep time[msec]
 *	Return:
 *			None
 *
 ******************************************************************************/
void	YAD1MD_Sleep
(
	U32					u32MSec
)
{
	/* Sleep( u32MSec ) */
	usleep(u32MSec*1000);

	return ;
}
